// Generated by CoffeeScript 1.8.0
(function() {
  var CANON, hasOwnProperty, isArguments, keys, map, nativeMap, pad, toString, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  CANON = {
    version: '0.3.0'
  };

  if (typeof module !== 'undefined' && 'exports' in module) {
    module.exports = CANON;
  } else {
    window.CANON = CANON;
  }

  CANON.stringify = (function() {
    var canonicalize;
    canonicalize = function(value) {
      var key, list, _i, _len, _ref;
      if (value === null) {
        return null;
      } else if (value === void 0) {
        return ['Undefined'];
      } else if (isArguments(value)) {
        return ['Arguments'].concat(__slice.call(map(value, canonicalize)));
      } else {
        switch (toString.call(value)) {
          case '[object Array]':
            return ['Array'].concat(__slice.call(map(value, canonicalize)));
          case '[object Date]':
            return ['Date'].concat(isFinite(+value) ? value.getUTCFullYear() + '-' + pad(value.getUTCMonth() + 1) + '-' + pad(value.getUTCDate()) + 'T' + pad(value.getUTCHours()) + ':' + pad(value.getUTCMinutes()) + ':' + pad(value.getUTCSeconds()) + '.' + pad(value.getUTCMilliseconds(), 3) + 'Z' : null);
          case '[object Function]':
            throw new TypeError('Functions cannot be serialized');
            break;
          case '[object Number]':
            if (isFinite(value)) {
              return value;
            } else {
              return ['Number', "" + value];
            }
            break;
          case '[object Object]':
            list = ['Object'];
            _ref = keys(value).sort();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              key = _ref[_i];
              list.push(key, canonicalize(value[key]));
            }
            return list;
          case '[object RegExp]':
            return ['RegExp', "" + value];
          default:
            return value;
        }
      }
    };
    return function(value) {
      if (value === 0 && 1 / value === -Infinity) {
        return '-0';
      } else {
        return JSON.stringify(canonicalize(value));
      }
    };
  })();

  CANON.parse = (function() {
    var canonicalize;
    canonicalize = function(value) {
      var element, elements, idx, month, object, rest, what, year, _i, _ref, _ref1;
      if (toString.call(value) !== '[object Array]') {
        return value;
      }
      what = value[0], elements = 2 <= value.length ? __slice.call(value, 1) : [];
      element = elements[0];
      switch (what) {
        case 'Arguments':
          return (function() {
            return arguments;
          }).apply(null, map(elements, canonicalize));
        case 'Array':
          return map(elements, canonicalize);
        case 'Date':
          _ref = map(element.match(/\d+/g), Number), year = _ref[0], month = _ref[1], rest = 3 <= _ref.length ? __slice.call(_ref, 2) : [];
          return new Date(Date.UTC.apply(Date, [year, month - 1].concat(__slice.call(rest))));
        case 'Number':
          return +element;
        case 'Object':
          object = {};
          for (idx = _i = 0, _ref1 = elements.length; _i < _ref1; idx = _i += 2) {
            object[elements[idx]] = canonicalize(elements[idx + 1]);
          }
          return object;
        case 'RegExp':
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(RegExp, /^[/](.+)[/]([gimy]*)$/.exec(element).slice(1), function(){});
        case 'Undefined':
          return void 0;
        default:
          throw new Error('Invalid input');
      }
    };
    return function(string) {
      if (string === '-0') {
        return -0;
      } else {
        return canonicalize(JSON.parse(string));
      }
    };
  })();

  _ref = Object.prototype, hasOwnProperty = _ref.hasOwnProperty, toString = _ref.toString;

  isArguments = (function() {
    if (toString.call(arguments) === '[object Arguments]') {
      return function(value) {
        return toString.call(value) === '[object Arguments]';
      };
    } else {
      return function(value) {
        return (value != null) && hasOwnProperty.call(value, 'callee');
      };
    }
  })();

  nativeMap = Array.prototype.map;

  map = function(array, iterator) {
    var el, _i, _len, _results;
    if (nativeMap && array.map === nativeMap) {
      return array.map(iterator);
    } else {
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        el = array[_i];
        _results.push(iterator(el));
      }
      return _results;
    }
  };

  keys = Object.keys || function(object) {
    var key, _results;
    _results = [];
    for (key in object) {
      if (!__hasProp.call(object, key)) continue;
      _results.push(key);
    }
    return _results;
  };

  pad = function(n, min) {
    if (min == null) {
      min = 2;
    }
    return ("" + (1000 + n)).substr(4 - min);
  };

}).call(this);
